import { FC } from "react"
import {
  Title,
  SubTitle,
  Text,
  TextWrapper,
  ContentWrapper,
  Root,
} from "../../../../const/CommonStyledComponent"

export const Chapter2_1: FC = () => (
  <Root>
    <Title>非同期処理とは</Title>
    <ContentWrapper>
      <TextWrapper>
        <Text>
          まず初めに、非同期処理とは何か、どのようなシチュエーションで必要になるのかについて説明します。
        </Text>
        <SubTitle>非同期処理とは</SubTitle>
        <Text>
          非同期処理は、プログラム処理の中で、時間のかかる操作や他のタスクが完了するのを待つ必要がある場合に使用される処理の手法です。
          <br />
          JavaScriptはシングルスレッドでプログラムを処理しているため、Aという処理と同時にBを実行といった並列処理には対応していません。
          <br />
          そのため、通常の同期処理では、あるタスクが完了するまで次のタスクに進むことができません。
          <br />
          <br />
          例えば、データベースから値を取得する処理が走った後に、ユーザがページスクロールをしたとします。
          <br />
          その場合、DBから値を取得し終わるまで、ページはスクロールされず、ユーザからすると画面がフリーズしたと思われるかもしれません。
          <br />
          非同期処理では、タスクが開始された後に他の処理を続けることができます。
          <br />
          <br />
          同期処理の場合は、ページスクロールをしてから実際にスクロールされるまでに待ち時間が発生していましたが、
          <br />
          非同期処理ではDBから値を取得するタスクを一時中断して先にページスクロールを完了させた後、再度DBから値取得を行います。
        </Text>
      </TextWrapper>
      <TextWrapper>
        <SubTitle>非同期処理の特徴</SubTitle>
        <Text>
          1. ノンブロッキング:
          <br />
          非同期処理では、タスクの開始後に他の処理を続けることができるため、待機時間が発生してもプログラム全体が停止することはありません。
          <br />
          これにより、他の処理を継続しながら長時間かかる操作や外部リソースへのアクセスを待つことができます。
          <br />
          <br />
          2. コールバックやプロミス:
          <br />
          非同期処理では、結果を受け取るためのコールバック関数やプロミスを使用します。
          <br />
          非同期タスクが完了した後、結果を処理するために指定されたコールバック関数が呼び出されるか、プロミスが解決されます。
        </Text>
        <Text>
          非同期処理の主な利点は、時間のかかる操作や外部リソースへのアクセスなどの待機時間を最小限に抑え、
          <br />
          プログラムのパフォーマンスと応答性を向上させることです。
          <br />
          これにより、ユーザーインタラクションの応答性を維持しながら、効率的に複数のタスクを実行できます。
        </Text>
      </TextWrapper>
      <TextWrapper>
        <SubTitle>どのようなシチュエーションで使用するのか</SubTitle>
        <Text>
          フロントエンドで非同期処理を使用するシチュエーションとして最も頻出するのはAPIからデータを受け取って処理を実装するパターンです。
          <br />
          そのほかにも、大容量のデータを読み込む場合や、タイマー処理などでも非同期処理が使用されます。
          <br />
          コールバックやプロミスを使用した非同期処理について次の章からそれぞれ詳しく説明していきます。
        </Text>
      </TextWrapper>
    </ContentWrapper>
  </Root>
)
